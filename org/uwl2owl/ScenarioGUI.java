package org.uwl2owl;

import bean.SystemUser;
import restclient.AuthenticationClient;
import soapclient.Concept;
import util.Constants;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.MessageContext;
import java.util.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author muac
 */
public class ScenarioGUI extends javax.swing.JFrame {

    /**
     * Creates new form ScenarioGUI
     */
    public ScenarioGUI() {
        initComponents();
    }

    class ComboItem
    {
        private String key;
        private String value;

        public ComboItem()
        {
            
        }
        
        public ComboItem(String key, String value)
        {
            this.key = key;
            this.value = value;
        }

        @Override
        public String toString()
        {
            return key;
        }

        public String getKey()
        {
            return key;
        }

        public String getValue()
        {
            return value;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxConcept = new javax.swing.JComboBox();
        jTextFieldConceptName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConceptDescription = new javax.swing.JTextArea();
        jComboBoxRelationship = new javax.swing.JComboBox();
        jComboBoxParentConcept = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonLoadExistingScenario = new javax.swing.JButton();
        jButtonAnnotateQuality = new javax.swing.JButton();
        jButtonAnnotateMetric = new javax.swing.JButton();
        jButtonAnnotateValue = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jLabelInformation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jComboBoxConcept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextAreaConceptDescription.setColumns(20);
        jTextAreaConceptDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaConceptDescription);

        jComboBoxRelationship.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxParentConcept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Select Scenario:");

        jLabel2.setText("Scenario Name:");

        jLabel3.setText("Scenario Description:");

        jLabel4.setText("Relation:");

        jLabel5.setText("Parent Element:");

        jButtonLoadExistingScenario.setText("Load Existing Scenario");
        jButtonLoadExistingScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadExistingScenarioActionPerformed(evt);
            }
        });

        jButtonAnnotateQuality.setText("Annotation Quality");
        jButtonAnnotateQuality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnotateQualityActionPerformed(evt);
            }
        });

        jButtonAnnotateMetric.setText("Annotate Metric");
        jButtonAnnotateMetric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnotateMetricActionPerformed(evt);
            }
        });

        jButtonAnnotateValue.setText("Annotate Value");
        jButtonAnnotateValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnotateValueActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBoxConcept, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldConceptName, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButtonLoadExistingScenario, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBoxRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxParentConcept, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonAnnotateQuality, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                    .addComponent(jButtonAnnotateMetric, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonAnnotateValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabelInformation))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelInformation)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxConcept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonLoadExistingScenario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldConceptName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAnnotateQuality)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAnnotateMetric)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnnotateValue)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxParentConcept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jButtonSave)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        initializeGUI();
        System.out.println("Window opened.");
    }//GEN-LAST:event_formWindowOpened

    private void initializeGUI()
    {
        try
        {
            jComboBoxConcept.removeAllItems();
            jComboBoxRelationship.removeAllItems();
            jComboBoxParentConcept.removeAllItems();


            Constants.ontologyServerURI = "http://aufeef.itu.dk:8080/ArchitectureDesignWorkspace/webresources";

            AuthenticationClient authenticationClient = new AuthenticationClient();
            SystemUser tempSystemUser = (SystemUser) authenticationClient.isSystemUserPresent(SystemUser.class, "test");
            if( !(tempSystemUser.getUserid() != null && tempSystemUser.getUserid().length() > 0) )
            {
                SystemUser systemUser = new SystemUser();
                systemUser.setUserid("test");
                systemUser.setName("testname");
                systemUser.setPassword("pwd");
                tempSystemUser = (SystemUser) authenticationClient.createSystemUser_XML(SystemUser.class, systemUser);
            }
            SystemUser systemUser = new SystemUser();
            systemUser.setUserid("test");
            systemUser.setPassword("pwd");
            tempSystemUser = (SystemUser) authenticationClient.getAccessKey_XML(SystemUser.class, systemUser);

            String userId = "test";
            String authKey = tempSystemUser.getCurrentAuthKey();

            soapclient.DesignOntology service = new soapclient.DesignOntology();
            port = service.getDesignWorkspaceOntologyPort();

            Map<String, Object> req_ctx = ((BindingProvider)port).getRequestContext();
            Map<String, List<String>> headers = new HashMap<String, List<String>>();
            headers.put(Constants.userId, Collections.singletonList(userId));
            headers.put(Constants.authKey, Collections.singletonList(authKey));
            req_ctx.put(MessageContext.HTTP_REQUEST_HEADERS, headers);

            ArrayList<String> relationList = (ArrayList) port.getRelationList(Constants.workspaceIdentifier);
            if( relationList != null )
            {
                for( int i = 0 ; i < relationList.size() ; i++ )
                {
                    String itemValue = relationList.get(i);
                    jComboBoxRelationship.addItem(new ComboItem(itemValue,itemValue));
                }
            }

            Concept parentConcept = new Concept();
            parentConcept.setName(Constants.knowledgeIdentifier);
            parentConcept.setDisplayName(Constants.knowledgeIdentifier);
            ArrayList<Concept> parentConceptList = (ArrayList) port.getConceptListOfParents("DesignWorkspace", Constants.knowledgeIdentifier, parentConcept);
            if( parentConceptList != null )
            {
                for( int i = 0 ; i < parentConceptList.size() ; i++ )
                {
                    Concept tempConcept = parentConceptList.get(i);
                    if( tempConcept != null )
                    {
                        jComboBoxParentConcept.addItem(new ComboItem(tempConcept.getName(),tempConcept.getDisplayName()));
                    }
                }
            }

            if( parentConceptList != null )
            {
                for( int i = 0 ; i < parentConceptList.size() ; i++ )
                {
                    Concept tempConcept = parentConceptList.get(i);
                    if( tempConcept != null )
                    {
                        if( tempConcept.getName() != null && !tempConcept.getName().equalsIgnoreCase(Constants.knowledgeIdentifier) )
                        jComboBoxConcept.addItem(new ComboItem(tempConcept.getDisplayName(), tempConcept.getName()));
                    }
                }
            }
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:initializeGUI");
            System.out.println(ex.toString());
        }
    }
    
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:
        try
        {
            boolean isAlreadyPresent = false;
            String relation = jComboBoxRelationship.getSelectedItem().toString();
            ComboItem parentItem = new ComboItem();
            parentItem = (ComboItem) jComboBoxParentConcept.getSelectedItem();
            Concept parentConcept = new Concept();
            parentConcept.setName(parentItem.getKey());
            parentConcept.setDisplayName(parentItem.getValue());
            
            Concept childConcept = new Concept();
            ComboItem conceptComboItem = (ComboItem) jComboBoxConcept.getSelectedItem();
            if( conceptComboItem != null && conceptComboItem.getValue() != null &&
                    conceptComboItem.getValue().length() > 0)
            {
                isAlreadyPresent = true;
            }
            
            if( isAlreadyPresent && isLoadbuttonPressed )
            {
                childConcept.setName(conceptComboItem.getValue());
                childConcept.setDisplayName(jTextFieldConceptName.getText());
                childConcept.setDescription(jTextAreaConceptDescription.getText());
                if( relation != null && relation.length() > 0 &&
                        childConcept.getName() != null && childConcept.getName().length() > 0 )
                {
                    port.updateConcept(Constants.workspaceIdentifier, Constants.knowledgeIdentifier, childConcept);
                    jLabelInformation.setText("Infoamtion updated.");
                    resetFields();
                    initializeGUI();
                    isAlreadyPresent = false;
                    isLoadbuttonPressed = false;
                }
            }
            else
            {
                childConcept.setName("_PAKME_" + jTextFieldConceptName.getText());
                childConcept.setDisplayName(jTextFieldConceptName.getText());
                childConcept.setDescription(jTextAreaConceptDescription.getText());
                if( relation != null && relation.length() > 0 &&
                        childConcept.getName() != null && childConcept.getName().length() > 0 )
                {
                    port.addConcept(Constants.workspaceIdentifier, Constants.knowledgeIdentifier, childConcept, relation, parentConcept);
                    jLabelInformation.setText("Infoamtion saved.");
                    resetFields();
                    initializeGUI();
                    isAlreadyPresent = false;
                }
            }            
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:jButtonSaveActionPerformed");
            System.out.println(ex.toString());
        }
        
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void resetFields()
    {
        try
        {
            jTextFieldConceptName.setText("");
            jTextAreaConceptDescription.setText("");
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:resetFields");
            System.out.println(ex.toString());
        }
    }
    
    private void jButtonAnnotateQualityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnotateQualityActionPerformed
        // TODO add your handling code here:
        try
        {
            String selectedText = jTextAreaConceptDescription.getSelectedText();
            String completeText = jTextAreaConceptDescription.getText();
            String placeholderAnnotation = Constants.qualityAnnotation;
            String replacedString = placeholderAnnotation.replaceFirst(Constants.annotationPlaceholder, selectedText);
            String newCompleteString = completeText.replaceFirst(selectedText, replacedString);
            jTextAreaConceptDescription.setText(newCompleteString);
            System.out.println(selectedText);
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:jButtonAnnotateQualityActionPerformed");
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jButtonAnnotateQualityActionPerformed

    private void jButtonAnnotateMetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnotateMetricActionPerformed
        // TODO add your handling code here:
        try
        {
            String selectedText = jTextAreaConceptDescription.getSelectedText();
            String completeText = jTextAreaConceptDescription.getText();
            String placeholderAnnotation = Constants.metricAnnotation;
            String replacedString = placeholderAnnotation.replaceFirst(Constants.annotationPlaceholder, selectedText);
            String newCompleteString = completeText.replaceFirst(selectedText, replacedString);
            jTextAreaConceptDescription.setText(newCompleteString);
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:jButtonAnnotateQualityActionPerformed");
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jButtonAnnotateMetricActionPerformed

    private void jButtonAnnotateValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnotateValueActionPerformed
        // TODO add your handling code here:
        try
        {
            String selectedText = jTextAreaConceptDescription.getSelectedText();
            String completeText = jTextAreaConceptDescription.getText();
            String placeholderAnnotation = Constants.valueAnnotation;
            String replacedString = placeholderAnnotation.replaceFirst(Constants.annotationPlaceholder, selectedText);
            String newCompleteString = completeText.replaceFirst(selectedText, replacedString);
            jTextAreaConceptDescription.setText(newCompleteString);
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:jButtonAnnotateQualityActionPerformed");
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jButtonAnnotateValueActionPerformed

    private void jButtonLoadExistingScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadExistingScenarioActionPerformed
        // TODO add your handling code here:
        try
        {
            ComboItem conceptComboItem = (ComboItem) jComboBoxConcept.getSelectedItem();
            if( conceptComboItem != null && conceptComboItem.getKey() != null &&
                    conceptComboItem.getKey().length() > 0)
            {
                Concept tempConcept = new Concept();
                tempConcept.setName(conceptComboItem.getValue());
                ArrayList<Concept> globalConceptList = (ArrayList) port.getConcept(Constants.workspaceIdentifier, Constants.knowledgeIdentifier, tempConcept);
                if( globalConceptList != null && globalConceptList.size() > 0 )
                    globalConcept = globalConceptList.get(0);
                jTextFieldConceptName.setText(globalConcept.getDisplayName());
                jTextAreaConceptDescription.setText(globalConcept.getDescription());
                isLoadbuttonPressed = true;
            }
        }
        catch(Exception ex)
        {
            System.out.println("Exception in ScenarioGUI:jButtonLoadExistingScenarioActionPerformed");
            System.out.println(ex.toString());
        }
        Concept childConcept = new Concept();
        childConcept.setName("");
        ArrayList<Concept> childConceptList = (ArrayList) port.getConcept(Constants.workspaceIdentifier, Constants.knowledgeIdentifier, childConcept);
        if( childConceptList != null && childConceptList.size() > 0 )
            childConcept = childConceptList.get(0);
    }//GEN-LAST:event_jButtonLoadExistingScenarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScenarioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScenarioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScenarioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScenarioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScenarioGUI().setVisible(true);
            }
        });
    }
    private soapclient.DesignWorkspaceOntology port = null;
    private Concept globalConcept;
    private boolean isLoadbuttonPressed = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnotateMetric;
    private javax.swing.JButton jButtonAnnotateQuality;
    private javax.swing.JButton jButtonAnnotateValue;
    private javax.swing.JButton jButtonLoadExistingScenario;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxConcept;
    private javax.swing.JComboBox jComboBoxParentConcept;
    private javax.swing.JComboBox jComboBoxRelationship;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelInformation;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConceptDescription;
    private javax.swing.JTextField jTextFieldConceptName;
    // End of variables declaration//GEN-END:variables
}
